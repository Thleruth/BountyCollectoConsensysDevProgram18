{"ast":null,"code":"import _regeneratorRuntime from \"/home/thleruth/EthCode/bountyCollectorConsensys/BountyCollectorConsensysDevProgram18/truffle/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/thleruth/EthCode/bountyCollectorConsensys/BountyCollectorConsensysDevProgram18/truffle/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/thleruth/EthCode/bountyCollectorConsensys/BountyCollectorConsensysDevProgram18/truffle/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/thleruth/EthCode/bountyCollectorConsensys/BountyCollectorConsensysDevProgram18/truffle/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/thleruth/EthCode/bountyCollectorConsensys/BountyCollectorConsensysDevProgram18/truffle/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/thleruth/EthCode/bountyCollectorConsensys/BountyCollectorConsensysDevProgram18/truffle/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/thleruth/EthCode/bountyCollectorConsensys/BountyCollectorConsensysDevProgram18/truffle/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/thleruth/EthCode/bountyCollectorConsensys/BountyCollectorConsensysDevProgram18/truffle/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport BountyCollectorContract from \"./contracts/BountyCollector.json\";\nimport getWeb3 from \"./utils/getWeb3\";\nimport truffleContract from \"truffle-contract\";\nimport Container from \"./components/Container\";\nimport \"./App.css\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      web3: null,\n      accounts: null,\n      contract: null\n    };\n    _this.componentDidMount =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var web3, accounts, Contract, instance;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return getWeb3();\n\n            case 3:\n              web3 = _context.sent;\n              _context.next = 6;\n              return web3.eth.getAccounts();\n\n            case 6:\n              accounts = _context.sent;\n              // Get the contract instance.\n              Contract = truffleContract(BountyCollectorContract);\n              Contract.setProvider(web3.currentProvider);\n              _context.next = 11;\n              return Contract.deployed();\n\n            case 11:\n              instance = _context.sent;\n              // Set web3, accounts, and contract to the state, and then proceed with an\n              web3.currentProvider.publicConfigStore.on('update', _this.updateInterface);\n\n              _this.setState({\n                web3: web3,\n                accounts: accounts,\n                contract: instance\n              });\n\n              _context.next = 20;\n              break;\n\n            case 16:\n              _context.prev = 16;\n              _context.t0 = _context[\"catch\"](0);\n              // Catch any errors for any of the above operations.\n              alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n              console.log(_context.t0);\n\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[0, 16]]);\n    }));\n\n    _this.updateInterface =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(data) {\n        var accounts;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                accounts = [data[\"selectedAddress\"]]; // the checksum is not handled with the selectedAddress, that's a easy work around\n\n                if (accounts[0].toUpperCase() !== _this.state.accounts[0].toUpperCase()) {\n                  _this.setState({\n                    accounts: accounts\n                  });\n                }\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    // check the onReview\n    value: function render() {\n      if (!this.state.web3) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        }, \"Loading Web3, accounts, and contract...\");\n      }\n\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(Container, {\n        appState: this.state,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/thleruth/EthCode/bountyCollectorConsensys/BountyCollectorConsensysDevProgram18/truffle/client/src/App.js"],"names":["React","Component","BountyCollectorContract","getWeb3","truffleContract","Container","App","state","web3","accounts","contract","componentDidMount","eth","getAccounts","Contract","setProvider","currentProvider","deployed","instance","publicConfigStore","on","updateInterface","setState","alert","console","log","data","toUpperCase"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,uBAAP,MAAoC,kCAApC;AACA,OAAOC,OAAP,MAAoB,iBAApB;AACA,OAAOC,eAAP,MAA4B,kBAA5B;AAEA,OAAOC,SAAP,MAAsB,wBAAtB;AAEA,OAAO,WAAP;;IAEMC,G;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,IAAI,EAAE,IADA;AAENC,MAAAA,QAAQ,EAAE,IAFJ;AAGNC,MAAAA,QAAQ,EAAE;AAHJ,K;UAMRC,iB;;;;6BAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAGGR,OAAO,EAHV;;AAAA;AAGVK,cAAAA,IAHU;AAAA;AAAA,qBAMOA,IAAI,CAACI,GAAL,CAASC,WAAT,EANP;;AAAA;AAMVJ,cAAAA,QANU;AAQhB;AACMK,cAAAA,QATU,GASCV,eAAe,CAACF,uBAAD,CAThB;AAUhBY,cAAAA,QAAQ,CAACC,WAAT,CAAqBP,IAAI,CAACQ,eAA1B;AAVgB;AAAA,qBAWOF,QAAQ,CAACG,QAAT,EAXP;;AAAA;AAWVC,cAAAA,QAXU;AAahB;AACAV,cAAAA,IAAI,CAACQ,eAAL,CAAqBG,iBAArB,CAAuCC,EAAvC,CAA0C,QAA1C,EAAoD,MAAKC,eAAzD;;AACA,oBAAKC,QAAL,CAAc;AAAEd,gBAAAA,IAAI,EAAJA,IAAF;AAAQC,gBAAAA,QAAQ,EAARA,QAAR;AAAkBC,gBAAAA,QAAQ,EAAEQ;AAA5B,eAAd;;AAfgB;AAAA;;AAAA;AAAA;AAAA;AAiBhB;AACAK,cAAAA,KAAK,0EAAL;AAGAC,cAAAA,OAAO,CAACC,GAAR;;AArBgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;UAyBpBJ,e;;;;;+BAAkB,kBAAMK,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACVjB,gBAAAA,QADU,GACC,CAACiB,IAAI,CAAC,iBAAD,CAAL,CADD,EAEhB;;AACA,oBAAIjB,QAAQ,CAAC,CAAD,CAAR,CAAYkB,WAAZ,OAA8B,MAAKpB,KAAL,CAAWE,QAAX,CAAoB,CAApB,EAAuBkB,WAAvB,EAAlC,EAAwE;AACtE,wBAAKL,QAAL,CAAc;AAACb,oBAAAA,QAAQ,EAARA;AAAD,mBAAd;AACD;;AALe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;;AAQlB;6BACS;AACP,UAAI,CAAC,KAAKF,KAAL,CAAWC,IAAhB,EAAsB;AACpB,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAAP;AACD;;AACC,aACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,SAAD;AACE,QAAA,QAAQ,EAAE,KAAKD,KADjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAOH;;;;EApDeN,S;;AAuDlB,eAAeK,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport BountyCollectorContract from \"./contracts/BountyCollector.json\";\nimport getWeb3 from \"./utils/getWeb3\";\nimport truffleContract from \"truffle-contract\";\n\nimport Container from \"./components/Container\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    web3: null,\n    accounts: null,\n    contract: null,\n  };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const Contract = truffleContract(BountyCollectorContract);\n      Contract.setProvider(web3.currentProvider);\n      const instance = await Contract.deployed();\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      web3.currentProvider.publicConfigStore.on('update', this.updateInterface);\n      this.setState({ web3, accounts, contract: instance });\n      } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      console.log(error);\n    }\n  };\n\n  updateInterface = async(data) => {\n    const accounts = [data[\"selectedAddress\"] ];\n    // the checksum is not handled with the selectedAddress, that's a easy work around\n    if (accounts[0].toUpperCase() !== this.state.accounts[0].toUpperCase()) {\n      this.setState({accounts});\n    }\n  }\n\n  // check the onReview\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n      return (\n        <div className=\"App\">\n          <Container\n            appState={this.state}\n          />\n        </div>\n      );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}